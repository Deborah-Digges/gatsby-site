{"componentChunkName":"component---src-templates-blog-template-js","path":"/2015/10/23/pr-bot/","result":{"data":{"markdownRemark":{"html":"<p>Being a collaborator for the <a href=\"http://openhatch.org\">Open Hatch Community</a>, I often request new contributors to send in an email to permit us to use their work; it involves commenting on every pull request on the project submitted by a new contributor.</p>\n<blockquote>\n<p>There is no time for cut-and-dried monotony. There is time for work. And time for love. That leaves\nno other time. - <a href=\"https://en.wikipedia.org/wiki/Coco_Chanel\">Coco Chanel</a></p>\n</blockquote>\n<p><em>Why not automate it?</em> This led me to the Github API, in particular the <a href=\"https://developer.github.com/v3/activity/events/\">Events API</a>, which provides a feed of the interesting things happening on a repository. The Event of interest to me was the <a href=\"https://developer.github.com/v3/activity/events/types/#pullrequestevent\">Pull Request Event</a>, that is triggered on every state change to a pull request on Github.</p>\n<p>Github allows subscription to events through WebHooks. A webhook allows one to configure a URL to which a POST request will be sent, if and when the event of interest is triggered. The POST body will have data relevant to the event, which for the Pull Request Event includes: the <em>action</em>—what state change occurred on the Pull Request Object—the Pull Request ID, and the Pull Request Object itself.</p>\n<p>The next thing to do was to figure out how to comment on a Pull Request using the Github API. It seemed <a href=\"https://developer.github.com/v3/pulls/comments/#create-a-comment\">simple enough</a>. However, it turned out that the dubious Pull Request API for comments is meant for commenting on diffs only and not on the pull request as a whole. <a href=\"https://developer.github.com/v3/issues/comments/\">The Issues API for comments</a> is what is to be used for commenting on Pull Requests as well—counterintuitive as that may be. </p>\n<p>The API for creating a comment has the signature: <code>/repos/:owner/:repo/issues/:number/comments</code>. I was confused as to how to get an <em>issue number</em> corresponding to a pull request, as there is usually no one-to-one correspondence between them. The final piece of the puzzle was the <code>_links</code> field in the POST body that contains the API endpoint for creating comments on that pull request.</p>\n<p><img src=\"../images/automation.png\" alt=\"XKCD Automation\"></p>\n<p>It remains to be seen of how much use this tool will be.</p>\n<p>Check out the code <a href=\"https://github.com/Deborah-Digges/pr-bot\">here</a> ; see pr-bot in action by submitting a Pull Request! :) </p>","frontmatter":{"title":"PR Bot"},"fields":{"date":"2015-10-23","slug":"2015/10/23/pr-bot/"}}},"pageContext":{"slug":"2015/10/23/pr-bot/","date":"2015-10-23"}},"staticQueryHashes":[]}