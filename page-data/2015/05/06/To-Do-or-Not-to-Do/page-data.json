{"componentChunkName":"component---src-templates-blog-template-js","path":"/2015/05/06/To-Do-or-Not-to-Do/","result":{"data":{"markdownRemark":{"html":"<p>I was recently in dire need of a hash table implementation in C and wasn’t ready to write one just then. With some luck and after considerable foraging on the internet I came across Troy Hanson’s project, <a href=\"http://troydhanson.github.io/uthash/userguide.html\">uthash</a> which provides a hash table for C structures.</p>\n<p>For some reason, I needed to tweak one of the functions and found uthash to consist entirely of a single header file with macros like this:</p>\n<pre><code class=\"language-bash\">#define FOO(stuff)        \\\ndo {                      \\\n    thing1();             \\\n    thing2();             \\\n} while(0)\n</code></pre>\n<p>It seemed perfectly redundant to have a loop that always executes exactly once. Like most things in the universe, it has a reasonable explanation for its awkwardness.</p>\n<blockquote>\n<p>“It's the only construct in C that you can use to #define a multistatement operation, put a semicolon after, and still use within an if statement.”</p>\n</blockquote>\n<p>For example, if FOO was defined as below:</p>\n<pre><code class=\"language-bash\">#define FOO(stuff) thing1(); thing2()\n</code></pre>\n<p>the following if-else construct would be syntactically wrong:</p>\n<pre><code class=\"language-bash\">if (condition)                     \n    FOO(stuff);                  \nelse                                   \n    other_stuff();                 \n                                       \n\n// Preprocessed to:                                       \nif (condition)\n    thing1();\n    thing2();  => Compiler cries.\nelse\n    other_stuff();\n</code></pre>\n<p>Even enclosing the macro body in braces would not help, as you would need to omit the semicolon after the call to FOO, which is counter-intuitive.</p>\n<pre><code class=\"language-bash\">#define FOO(stuff) { thing1(); thing2(); }\n\nif (condition)\n    FOO(x)\nelse\n    other_stuff();\n</code></pre>\n<p>The do-while-zero construct makes this syntactically correct:</p>\n<pre><code class=\"language-bash\">if (condition)\n    FOO(x);\nelse\n    other_stuff();\n</code></pre>\n<p>On the other hand, you could just use a function and save yourself the brain jitters.</p>","frontmatter":{"title":"To Do or Not to Do"},"fields":{"date":"2015-05-06","slug":"2015/05/06/To-Do-or-Not-to-Do/"}}},"pageContext":{"slug":"2015/05/06/To-Do-or-Not-to-Do/","date":"2015-05-06"}},"staticQueryHashes":[]}